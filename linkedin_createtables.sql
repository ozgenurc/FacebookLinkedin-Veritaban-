CREATE SCHEMA LINKEDIN;
USE LINKEDIN;

CREATE TABLE IF NOT EXISTS ADDRESS(
	address_id MEDIUMINT(8) NOT NULL AUTO_INCREMENT,
    line1 VARCHAR(45) DEFAULT NULL,
    line2 VARCHAR(45) DEFAULT NULL,
    line3 VARCHAR(45) DEFAULT NULL,
    city VARCHAR(45) DEFAULT NULL,
    zip VARCHAR(45) DEFAULT NULL,
    country VARCHAR(45) DEFAULT NULL,
    PRIMARY KEY (address_id)
);
    
CREATE TABLE IF NOT EXISTS MARITAL_STATUS(
	marital_status_id MEDIUMINT(8) NOT NULL,
    marital_status ENUM('Single','in Relationship','Married','Separated') DEFAULT NULL,
    PRIMARY KEY(marital_status_id)
);
    
CREATE TABLE IF NOT EXISTS ORGANIZATIONS(
	org_id MEDIUMINT(8) NOT NULL AUTO_INCREMENT,
    org_name VARCHAR(45) DEFAULT NULL,
    org_description VARCHAR(255) DEFAULT NULL,
    other VARCHAR(255) DEFAULT NULL,
    PRIMARY KEY(org_id)
);

CREATE TABLE IF NOT EXISTS COMPANY (
	company_id MEDIUMINT(8) NOT NULL AUTO_INCREMENT,
    cname	VARCHAR(45) NOT NULL,
	sector VARCHAR(45) DEFAULT NULL,
    size VARCHAR(45) DEFAULT NULL,
    ctype VARCHAR(45) DEFAULT NULL,
    cdesc VARCHAR(255) DEFAULT NULL,
    logo VARCHAR(45) DEFAULT NULL,
    address_id  MEDIUMINT(8) DEFAULT NULL,
    boss MEDIUMINT(8) DEFAULT NULL,
    PRIMARY KEY (company_id),
    FOREIGN KEY (address_id) REFERENCES ADDRESS (address_id) ON DELETE CASCADE ON UPDATE CASCADE,
    KEY company_ibfk_2 (boss)
);
    
CREATE TABLE IF NOT EXISTS MEMBERS(
	member_id MEDIUMINT(8) NOT NULL DEFAULT '0',
    birthday DATE DEFAULT NULL,
    e_mail VARCHAR(100) DEFAULT NULL,
    password_ VARCHAR(45) DEFAULT NULL, 
    fname VARCHAR(45) DEFAULT NULL,
    minit VARCHAR(45) DEFAULT NULL,
    lname VARCHAR(45) DEFAULT NULL,
    gender ENUM('Male','Female') DEFAULT NULL,
    join_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    other VARCHAR(255) DEFAULT NULL,
    address_id MEDIUMINT(8) NOT NULL,
    current_organization_id MEDIUMINT(8) NOT NULL,
    marital_status_id MEDIUMINT(8) NOT NULL,
    work_comp_id MEDIUMINT(8) DEFAULT NULL,
    PRIMARY KEY (member_id),
    FOREIGN KEY (work_comp_id) REFERENCES COMPANY (company_id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (address_id) REFERENCES ADDRESS (address_id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (current_organization_id) REFERENCES ORGANIZATIONS (org_id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (marital_status_id) REFERENCES MARITAL_STATUS (marital_status_id) ON DELETE CASCADE ON UPDATE CASCADE
);

ALTER TABLE COMPANY
	ADD CONSTRAINT company_ibfk_2 FOREIGN KEY (boss) REFERENCES MEMBERS (member_id) ON DELETE CASCADE ON UPDATE CASCADE;
    
CREATE TABLE IF NOT EXISTS JOB_OFFER (
	job_id MEDIUMINT(8) NOT NULL AUTO_INCREMENT,
    job_title VARCHAR(45) DEFAULT NULL,
    location VARCHAR(45) DEFAULT NULL,
    job_function VARCHAR(255) DEFAULT NULL,
    emplooye_type VARCHAR(45) DEFAULT NULL,
    seniority VARCHAR(45) DEFAULT NULL,
    offer_desc VARCHAR(255) DEFAULT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    company_id MEDIUMINT(8) NOT NULL,
    PRIMARY KEY (job_id),
    FOREIGN KEY (company_id) REFERENCES COMPANY(company_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS FOLLOWS_ (
	member_id MEDIUMINT(8) NOT NULL,
    company_id MEDIUMINT(8) NOT NULL,
    PRIMARY KEY (member_id, company_id),
    FOREIGN KEY (member_id) REFERENCES MEMBERS (member_id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (company_id) REFERENCES COMPANY (company_id) ON DELETE CASCADE ON UPDATE CASCADE
);

    
CREATE TABLE IF NOT EXISTS GROUPS_(
	group_id MEDIUMINT(8) NOT NULL AUTO_INCREMENT,
    group_name VARCHAR(45) DEFAULT NULL,
    group_description VARCHAR(255) DEFAULT NULL,
    group_start TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    group_end TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    group_last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    other VARCHAR(255) DEFAULT NULL,
    create_member_id MEDIUMINT(8) NOT NULL,
    PRIMARY KEY(group_id),
    FOREIGN KEY (create_member_id) REFERENCES MEMBERS (member_id) ON DELETE CASCADE ON UPDATE CASCADE
);

DELIMITER //
CREATE TRIGGER groupdatecontrol BEFORE INSERT ON GROUPS_
 FOR EACH ROW BEGIN
          IF New.group_start>New.group_end
			THEN
               SIGNAL SQLSTATE '45000'
                    SET MESSAGE_TEXT = 'Can not start date bigger than end date';
          END IF;
     END
//
DELIMITER ;

DELIMITER //
CREATE TRIGGER groupdatecontrol2 BEFORE UPDATE ON GROUPS_
 FOR EACH ROW BEGIN
          IF New.group_start>New.group_end
			THEN
               SIGNAL SQLSTATE '45000'
                    SET MESSAGE_TEXT = 'Can not start date bigger than end date';
          END IF;
     END
//
DELIMITER ;

CREATE TABLE IF NOT EXISTS CV(
	cv_id MEDIUMINT(8) NOT NULL AUTO_INCREMENT,
    date_created TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    date_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    member_id MEDIUMINT(8) NOT NULL,
    PRIMARY KEY(cv_id, member_id),
    FOREIGN KEY (member_id) REFERENCES MEMBERS (member_id) ON DELETE CASCADE ON UPDATE CASCADE
);
    
CREATE TABLE IF NOT EXISTS CV_SECTION(
	cv_section_id MEDIUMINT(8) NOT NULL AUTO_INCREMENT,
    title ENUM('Work Experience','Education','Licance and Sertificated','Volunteer Experience') DEFAULT NULL,
    description_ VARCHAR(255) DEFAULT NULL,
    date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    date_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    cv_id MEDIUMINT(8) NOT NULL,
    PRIMARY KEY(cv_section_id),
    FOREIGN KEY (cv_id) REFERENCES CV (cv_id) ON DELETE CASCADE ON UPDATE CASCADE
);
    
CREATE TABLE IF NOT EXISTS PROFILE_(
	profile_id MEDIUMINT(8) NOT NULL UNIQUE,
    date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    date_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	member_id MEDIUMINT(8),
    PRIMARY KEY(profile_id, member_id),
    FOREIGN KEY (member_id) REFERENCES MEMBERS (member_id) ON DELETE CASCADE ON UPDATE CASCADE
);
    
CREATE TABLE IF NOT EXISTS PROFILE_SECTION(
	profile_section_id MEDIUMINT(8) NOT NULL AUTO_INCREMENT,
    title ENUM('Skills','Patent','Course','Project','Honors and Awards','Exam Scores','Languages','Organizations'),
    text_ VARCHAR(255) DEFAULT NULL,
    date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    date_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    profile_id MEDIUMINT(8),
    PRIMARY KEY(profile_section_id),
    FOREIGN KEY (profile_id) REFERENCES PROFILE_ (profile_id) ON DELETE CASCADE ON UPDATE CASCADE
);
    
CREATE TABLE IF NOT EXISTS CONNECTS(
	member_id MEDIUMINT(8) NOT NULL,
    connected_member_id  MEDIUMINT(8) NOT NULL,
    connection_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    PRIMARY KEY(member_id,connected_member_id),
    FOREIGN KEY (member_id) REFERENCES MEMBERS (member_id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (connected_member_id) REFERENCES MEMBERS (member_id) ON DELETE CASCADE ON UPDATE CASCADE
);

DELIMITER //
CREATE TRIGGER insert_selfconnects BEFORE INSERT ON CONNECTS
 FOR EACH ROW BEGIN
          IF NEW.member_id=New.connected_member_id 
          THEN
               SIGNAL SQLSTATE '45000'
                    SET MESSAGE_TEXT = 'Can not connect with yourself!';
          END IF;
     END
//
DELIMITER ;
DELIMITER //
CREATE TRIGGER update_connects BEFORE UPDATE ON CONNECTS
 FOR EACH ROW BEGIN
          IF NEW.member_id=New.connected_member_id 
          THEN
               SIGNAL SQLSTATE '45000'
                    SET MESSAGE_TEXT = 'Can not connect with yourself!';
          END IF;
     END
//
DELIMITER ;
    
CREATE TABLE IF NOT EXISTS RECOMMENDATION(
	member_id MEDIUMINT(8) NOT NULL,
    recommended_id MEDIUMINT(8) NOT NULL,
    start_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    others_ VARCHAR(255) DEFAULT NULL,
    PRIMARY KEY(member_id,recommended_id),
	FOREIGN KEY (member_id) REFERENCES MEMBERS (member_id) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (recommended_id) REFERENCES MEMBERS (member_id) ON DELETE CASCADE ON UPDATE CASCADE
);  

DELIMITER //
CREATE TRIGGER insert_selfrec BEFORE INSERT ON RECOMMENDATION
 FOR EACH ROW BEGIN
          IF NEW.member_id=New.recommended_id 
          THEN
               SIGNAL SQLSTATE '45000'
                    SET MESSAGE_TEXT = 'Can not recommend yourself!';
          END IF;
     END
//
DELIMITER ;
DELIMITER //
CREATE TRIGGER update_selfrec BEFORE UPDATE ON RECOMMENDATION
 FOR EACH ROW BEGIN
          IF NEW.member_id=New.recommended_id 
          THEN
               SIGNAL SQLSTATE '45000'
                    SET MESSAGE_TEXT = 'Can not recommend yourself!';
          END IF;
     END
//
DELIMITER ;
    
CREATE TABLE IF NOT EXISTS MEMBER_GROUPS(
	member_id MEDIUMINT(8) NOT NULL,
    group_id MEDIUMINT(8) NOT NULL,
    date_joined TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    date_left TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    PRIMARY KEY(member_id,group_id),
	FOREIGN KEY (member_id) REFERENCES MEMBERS (member_id) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (group_id) REFERENCES GROUPS_ (group_id) ON DELETE CASCADE ON UPDATE CASCADE
);

DELIMITER //
CREATE TRIGGER groupdelete AFTER DELETE ON GROUPS_
 FOR EACH ROW BEGIN
	DELETE FROM MEMBER_GROUPS WHERE MEMBER_GROUPS.group_id=GROUPS_.group_id;	
END
//
DELIMITER ;


    

    
    
    
    
    
    
    





    
    
    
    
    
    
    
    
    






    



